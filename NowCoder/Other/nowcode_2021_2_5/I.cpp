#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
const long N=4e6;
const long M=1e9+7;
int n,num;
int IsPrime[2001];
bool IsNotPrime[2001];
ll ans[N+1];
ll f[N+1];
void SearchPrime(int n){
	memset(IsNotPrime, 0, sizeof(IsNotPrime));
	IsNotPrime[1]=true;
	for(int i=2;i<=n;i++){
		if(!IsNotPrime[i]) IsPrime[++num]=i;
		for(int j=1;i*IsPrime[j]<=n;j++){
			IsNotPrime[i*IsPrime[j]]=true;
			if(i%IsPrime[j]==0) break;
		}
	}
}

void sovle(ll in){
	ll tmp=in;
	ll i=1,ad=10;
	while(in>1&&i<=num){
		if(in%IsPrime[i]==0){
			in/=IsPrime[i];
            while (IsPrime[i]>ad){
                ad*=10;
            }
			ans[tmp]=(ans[tmp]*ad+IsPrime[i]);
            ad=10;
		}
		else i++;
	}
    if(in>1){
        while (in>ad){
            ad*=10;
        }
		ans[tmp]*=(ad+IsPrime[i])%M;
        ad=10;
    }
    ans[tmp]%=M;
}

void biao(){
    f[10000]=290383144;
    f[20000]=709023625;
    f[30000]=129076025;
    f[40000]=981605897;
    f[50000]=529391449;
    f[60000]=565116820;
    f[70000]=374038757;
    f[80000]=953064370;
    f[90000]=669447843;
    f[100000]=976665165;
    f[110000]=397384697;
    f[120000]=830833499;
    f[130000]=411176435;
    f[140000]=722857602;
    f[150000]=716749794;
    f[160000]=462725570;
    f[170000]=240243809;
    f[180000]=381655791;
    f[190000]=322009935;
    f[200000]=821858904;
    f[210000]=469406585;
    f[220000]=3262571;
    f[230000]=329121436;
    f[240000]=986126324;
    f[250000]=449354697;
    f[260000]=688923543;
    f[270000]=866459542;
    f[280000]=850478892;
    f[290000]=216266911;
    f[300000]=491921832;
    f[310000]=499567514;
    f[320000]=706641518;
    f[330000]=842182792;
    f[340000]=144691480;
    f[350000]=357774495;
    f[360000]=998777820;
    f[370000]=197101741;
    f[380000]=95632754;
    f[390000]=265803381;
    f[400000]=244429927;
    f[410000]=977124258;
    f[420000]=5081718;
    f[430000]=496137731;
    f[440000]=99227767;
    f[450000]=991236410;
    f[460000]=347088472;
    f[470000]=875398122;
    f[480000]=133845753;
    f[490000]=153633572;
    f[500000]=143433662;
    f[510000]=207859147;
    f[520000]=47660272;
    f[530000]=346859696;
    f[540000]=718239083;
    f[550000]=10611135;
    f[560000]=922549980;
    f[570000]=189162208;
    f[580000]=777357414;
    f[590000]=792400592;
    f[600000]=740946503;
    f[610000]=434334010;
    f[620000]=366273555;
    f[630000]=769239058;
    f[640000]=403438148;
    f[650000]=731627247;
    f[660000]=992727631;
    f[670000]=948519381;
    f[680000]=976797647;
    f[690000]=749936903;
    f[700000]=65870389;
    f[710000]=130364557;
    f[720000]=220901082;
    f[730000]=640661179;
    f[740000]=47871385;
    f[750000]=337050869;
    f[760000]=321140824;
    f[770000]=891081734;
    f[780000]=349571864;
    f[790000]=689406061;
    f[800000]=960839452;
    f[810000]=260272445;
    f[820000]=502053877;
    f[830000]=640449820;
    f[840000]=358705098;
    f[850000]=227942917;
    f[860000]=874753084;
    f[870000]=910867447;
    f[880000]=642388091;
    f[890000]=457759601;
    f[900000]=223697309;
    f[910000]=622261660;
    f[920000]=579085713;
    f[930000]=500309887;
    f[940000]=957694831;
    f[950000]=3090771;
    f[960000]=24904826;
    f[970000]=973009380;
    f[980000]=607391094;
    f[990000]=587906890;
    f[1000000]=948185149;
    f[1010000]=176035643;
    f[1020000]=147099258;
    f[1030000]=55218451;
    f[1040000]=418068922;
    f[1050000]=916850978;
    f[1060000]=558053400;
    f[1070000]=266410483;
    f[1080000]=346898901;
    f[1090000]=507360386;
    f[1100000]=237700528;
    f[1110000]=745400173;
    f[1120000]=850422345;
    f[1130000]=366071321;
    f[1140000]=674716749;
    f[1150000]=739064511;
    f[1160000]=468043847;
    f[1170000]=213877941;
    f[1180000]=285037065;
    f[1190000]=729230667;
    f[1200000]=400901485;
    f[1210000]=869230205;
    f[1220000]=344045665;
    f[1230000]=31182056;
    f[1240000]=250067804;
    f[1250000]=737802251;
    f[1260000]=674415354;
    f[1270000]=944188969;
    f[1280000]=843583410;
    f[1290000]=547923414;
    f[1300000]=439164350;
    f[1310000]=780816325;
    f[1320000]=244169365;
    f[1330000]=823609044;
    f[1340000]=679203425;
    f[1350000]=976304805;
    f[1360000]=348406975;
    f[1370000]=992846360;
    f[1380000]=571334943;
    f[1390000]=381788891;
    f[1400000]=283897882;
    f[1410000]=8030446;
    f[1420000]=534207199;
    f[1430000]=834613640;
    f[1440000]=684783168;
    f[1450000]=696479228;
    f[1460000]=948484436;
    f[1470000]=610998238;
    f[1480000]=520261378;
    f[1490000]=916334085;
    f[1500000]=574057110;
    f[1510000]=446648050;
    f[1520000]=464611781;
    f[1530000]=120439825;
    f[1540000]=689156596;
    f[1550000]=141502585;
    f[1560000]=426775611;
    f[1570000]=335917823;
    f[1580000]=475647539;
    f[1590000]=327338311;
    f[1600000]=139577897;
    f[1610000]=503391577;
    f[1620000]=474964143;
    f[1630000]=679341659;
    f[1640000]=792267768;
    f[1650000]=160730690;
    f[1660000]=43720960;
    f[1670000]=908237994;
    f[1680000]=75063501;
    f[1690000]=557698392;
    f[1700000]=669279217;
    f[1710000]=820373042;
    f[1720000]=888473692;
    f[1730000]=614357162;
    f[1740000]=708865005;
    f[1750000]=358178788;
    f[1760000]=424841290;
    f[1770000]=967917867;
    f[1780000]=874070130;
    f[1790000]=824074025;
    f[1800000]=751172311;
    f[1810000]=832975184;
    f[1820000]=551655829;
    f[1830000]=270247427;
    f[1840000]=931968908;
    f[1850000]=171593494;
    f[1860000]=331089428;
    f[1870000]=247196969;
    f[1880000]=65668448;
    f[1890000]=44108711;
    f[1900000]=875144508;
    f[1910000]=17075666;
    f[1920000]=737238330;
    f[1930000]=684471833;
    f[1940000]=850500981;
    f[1950000]=494241030;
    f[1960000]=161757509;
    f[1970000]=948064849;
    f[1980000]=899600037;
    f[1990000]=443680915;
    f[2000000]=194288389;
    f[2010000]=48343314;
    f[2020000]=420924043;
    f[2030000]=664045933;
    f[2040000]=974066764;
    f[2050000]=475206774;
    f[2060000]=233090721;
    f[2070000]=953169670;
    f[2080000]=352708958;
    f[2090000]=921769342;
    f[2100000]=317989227;
    f[2110000]=103136187;
    f[2120000]=763767912;
    f[2130000]=498732455;
    f[2140000]=18835783;
    f[2150000]=134215785;
    f[2160000]=864524064;
    f[2170000]=31472092;
    f[2180000]=860663066;
    f[2190000]=910476893;
    f[2200000]=95207530;
    f[2210000]=682739894;
    f[2220000]=464933786;
    f[2230000]=877892246;
    f[2240000]=676620570;
    f[2250000]=622671208;
    f[2260000]=191371600;
    f[2270000]=560609632;
    f[2280000]=185567032;
    f[2290000]=922736324;
    f[2300000]=976455155;
    f[2310000]=17073830;
    f[2320000]=796402949;
    f[2330000]=461065944;
    f[2340000]=562195191;
    f[2350000]=214609263;
    f[2360000]=508095046;
    f[2370000]=999944677;
    f[2380000]=160029651;
    f[2390000]=771074239;
    f[2400000]=145920860;
    f[2410000]=666513743;
    f[2420000]=1662187;
    f[2430000]=343209521;
    f[2440000]=893936349;
    f[2450000]=995323093;
    f[2460000]=158536381;
    f[2470000]=259844978;
    f[2480000]=620050728;
    f[2490000]=464631443;
    f[2500000]=963391912;
    f[2510000]=920274038;
    f[2520000]=398539653;
    f[2530000]=554555798;
    f[2540000]=530108635;
    f[2550000]=298196853;
    f[2560000]=911052449;
    f[2570000]=284507135;
    f[2580000]=66079642;
    f[2590000]=519047172;
    f[2600000]=402215642;
    f[2610000]=456652558;
    f[2620000]=892049277;
    f[2630000]=65926474;
    f[2640000]=372340781;
    f[2650000]=818759397;
    f[2660000]=312551902;
    f[2670000]=699468289;
    f[2680000]=614873420;
    f[2690000]=298512819;
    f[2700000]=146069152;
    f[2710000]=917870070;
    f[2720000]=451697193;
    f[2730000]=286710497;
    f[2740000]=907183593;
    f[2750000]=496500297;
    f[2760000]=921357702;
    f[2770000]=234761959;
    f[2780000]=896014670;
    f[2790000]=439769291;
    f[2800000]=979517380;
    f[2810000]=781879578;
    f[2820000]=388224345;
    f[2830000]=132228404;
    f[2840000]=165064267;
    f[2850000]=328646586;
    f[2860000]=709855298;
    f[2870000]=779520056;
    f[2880000]=926682985;
    f[2890000]=167866083;
    f[2900000]=552783695;
    f[2910000]=80358123;
    f[2920000]=537920829;
    f[2930000]=134319742;
    f[2940000]=781921003;
    f[2950000]=413966839;
    f[2960000]=79233492;
    f[2970000]=892960251;
    f[2980000]=220888475;
    f[2990000]=9043705;
    f[3000000]=727397734;
    f[3010000]=891182560;
    f[3020000]=700098186;
    f[3030000]=792758265;
    f[3040000]=305945698;
    f[3050000]=281424124;
    f[3060000]=127693730;
    f[3070000]=201599537;
    f[3080000]=120757110;
    f[3090000]=273278560;
    f[3100000]=258127279;
    f[3110000]=812695980;
    f[3120000]=799880286;
    f[3130000]=459142801;
    f[3140000]=451050614;
    f[3150000]=447620345;
    f[3160000]=414362859;
    f[3170000]=635394228;
    f[3180000]=945263933;
    f[3190000]=373999062;
    f[3200000]=721196793;
    f[3210000]=322556133;
    f[3220000]=619937514;
    f[3230000]=515529976;
    f[3240000]=637957980;
    f[3250000]=987080084;
    f[3260000]=833730366;
    f[3270000]=128162651;
    f[3280000]=540619175;
    f[3290000]=390707816;
    f[3300000]=448951671;
    f[3310000]=201769761;
    f[3320000]=35598128;
    f[3330000]=437693972;
    f[3340000]=564211710;
    f[3350000]=485799342;
    f[3360000]=322704611;
    f[3370000]=13060843;
    f[3380000]=444390857;
    f[3390000]=986188033;
    f[3400000]=157142770;
    f[3410000]=333405370;
    f[3420000]=609861232;
    f[3430000]=315812738;
    f[3440000]=147370884;
    f[3450000]=229228382;
    f[3460000]=784137438;
    f[3470000]=911336217;
    f[3480000]=336740842;
    f[3490000]=663408195;
    f[3500000]=834360475;
    f[3510000]=587754867;
    f[3520000]=204711389;
    f[3530000]=746050108;
    f[3540000]=549326748;
    f[3550000]=891680979;
    f[3560000]=243299395;
    f[3570000]=569036838;
    f[3580000]=758344684;
    f[3590000]=953338219;
    f[3600000]=677932580;
    f[3610000]=172909114;
    f[3620000]=348832035;
    f[3630000]=250818970;
    f[3640000]=578407421;
    f[3650000]=603007926;
    f[3660000]=654823216;
    f[3670000]=747932760;
    f[3680000]=490590529;
    f[3690000]=863088872;
    f[3700000]=175047661;
    f[3710000]=267306927;
    f[3720000]=805397542;
    f[3730000]=836851214;
    f[3740000]=509081918;
    f[3750000]=374004450;
    f[3760000]=779675285;
    f[3770000]=959568768;
    f[3780000]=805185898;
    f[3790000]=279545949;
    f[3800000]=211891630;
    f[3810000]=588224373;
    f[3820000]=620518321;
    f[3830000]=308906751;
    f[3840000]=279673724;
    f[3850000]=490101934;
    f[3860000]=997580069;
    f[3870000]=324318250;
    f[3880000]=157683323;
    f[3890000]=631967751;
    f[3900000]=590567573;
    f[3910000]=911521909;
    f[3920000]=246846368;
    f[3930000]=596252538;
    f[3940000]=356474049;
    f[3950000]=217136638;
    f[3960000]=426266882;
    f[3970000]=821673122;
    f[3980000]=268615899;
    f[3990000]=504734512;
    f[4000000]=662311550;
}

int main(){
    biao();
    SearchPrime(2000);
    long what;
    cin>>what;
    long l=1;
    while(l+10000<what){
        l+=10000;
    }
    for(int i=1;i<=what;i++){
        sovle(i);
        f[i]=(f[i-1]+ans[i])%M;
    }
    cout<<f[what];
	return 0;
}